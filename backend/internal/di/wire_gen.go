// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/TeslaMode1X/PVH_order/internal/api"
	"github.com/TeslaMode1X/PVH_order/internal/config"
	"github.com/TeslaMode1X/PVH_order/internal/db"
	auth2 "github.com/TeslaMode1X/PVH_order/internal/domain/providers/application"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/auth"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/file"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/materials"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/systems"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/user"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/windowmodels"
	"github.com/TeslaMode1X/PVH_order/internal/domain/providers/windowtypes"
	"log/slog"
)

// Injectors from wire.go:

func InitializeAPI(cfg *config.Config, log *slog.Logger) (*api.ServerHTTP, error) {
	sqlDB, err := db.ConnectToDB(cfg)
	if err != nil {
		return nil, err
	}
	repository := auth.ProvideAuthRepository(sqlDB)
	userRepository := user.ProvideUserRepository(sqlDB)
	service := auth.ProvideAuthService(repository, userRepository)
	handler := auth.ProvideAuthHandler(service, log)
	userService := user.ProvideUserService(userRepository)
	userHandler := user.ProvideUserHandler(userService, log)
	materialsRepository := materials.ProvideMaterialRepository(sqlDB)
	materialsService := materials.ProvideMaterialService(materialsRepository)
	materialsHandler := materials.ProvideMaterialHandler(materialsService, log)
	systemsRepository := systems.ProvideSystemsRepository(sqlDB)
	systemsService := systems.ProvideSystemsService(systemsRepository, materialsRepository)
	systemsHandler := systems.ProvideSystemsHandler(systemsService, log)
	windowtypesRepository := windowtypes.ProvideWindowRepository(sqlDB)
	windowtypesService := windowtypes.ProvideWindowService(windowtypesRepository)
	windowtypesHandler := windowtypes.ProvideWindowHandler(windowtypesService, log)
	windowmodelsRepository := windowmodels.ProvideWindowRepository(sqlDB)
	fileService := providers.ProvideFileService()
	windowmodelsService := windowmodels.ProvideWindowService(windowmodelsRepository, windowtypesRepository, materialsRepository, systemsRepository, fileService, log)
	windowmodelsHandler := windowmodels.ProvideWindowHandler(windowmodelsService, log)
	fileHandler := providers.ProvideFileHandler(fileService, log)
	applicationRepository := auth2.ProvideApplicationRepository(sqlDB)
	applicationService := auth2.ProvideApplicatonService(applicationRepository)
	applicationHandler := auth2.ProvideApplicationHandler(applicationService, log)
	serverHTTP := api.NewServerHTTP(cfg, handler, userHandler, materialsHandler, systemsHandler, windowtypesHandler, windowmodelsHandler, fileHandler, applicationHandler)
	return serverHTTP, nil
}
